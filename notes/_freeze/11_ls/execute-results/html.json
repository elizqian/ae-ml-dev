{
  "hash": "775504b63b66aaba47853719006eece2",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Linear Least Squares Problems\"\nhtml-math-method:\n  method: mathjax\n  url: \"https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js\"\n\n---\n\n\n\n\n\n\n\n::: {.hidden}\n\n\\newcommand*{\\R}{\\mathbb{R}}\n\\newcommand*{\\N}{\\mathbb{N}}\n\\newcommand*{\\cF}{\\mathcal{F}}\n\n\\newcommand{\\E}[1]{\\mathbb{E}\\left[#1\\right]}\n\\newcommand{\\Var}[1]{\\text{Var}\\left[#1\\right]}\n\\newcommand{\\Corr}[2]{\\text{Corr}\\left[#1, #2\\right]}\n\\newcommand{\\Cov}[2]{\\text{Cov}\\left[#1, #2\\right]}\n\\newcommand{\\Tr}{\\text{Tr}}\n\n\\newcommand{\\bA}{\\mathbf{A}}\n\\newcommand{\\bB}{\\mathbf{B}}\n\\newcommand{\\bC}{\\mathbf{C}}\n\\newcommand{\\bD}{\\mathbf{D}}\n\\newcommand{\\bE}{\\mathbf{E}}\n\\newcommand{\\bF}{\\mathbf{F}}\n\\newcommand{\\bG}{\\mathbf{G}}\n\\newcommand{\\bH}{\\mathbf{H}}\n\\newcommand{\\bI}{\\mathbf{I}}\n\\newcommand{\\bJ}{\\mathbf{J}}\n\\newcommand{\\bK}{\\mathbf{K}}\n\\newcommand{\\bL}{\\mathbf{L}}\n\\newcommand{\\bM}{\\mathbf{M}}\n\\newcommand{\\bN}{\\mathbf{N}}\n\\newcommand{\\bO}{\\mathbf{O}}\n\\newcommand{\\bP}{\\mathbf{P}}\n\\newcommand{\\bQ}{\\mathbf{Q}}\n\\newcommand{\\bR}{\\mathbf{R}}\n\\newcommand{\\bS}{\\mathbf{S}}\n\\newcommand{\\bT}{\\mathbf{T}}\n\\newcommand{\\bU}{\\mathbf{U}}\n\\newcommand{\\bV}{\\mathbf{V}}\n\\newcommand{\\bW}{\\mathbf{W}}\n\\newcommand{\\bX}{\\mathbf{X}}\n\\newcommand{\\bY}{\\mathbf{Y}}\n\\newcommand{\\bZ}{\\mathbf{Z}}\n\n\\newcommand{\\ba}{\\mathbf{a}}\n\\newcommand{\\bb}{\\mathbf{b}}\n\\newcommand{\\bc}{\\mathbf{c}}\n\\newcommand{\\bd}{\\mathbf{d}}\n\\newcommand{\\be}{\\mathbf{e}}\n\\newcommand{\\bef}{\\mathbf{f}}\n\\newcommand{\\bg}{\\mathbf{g}}\n\\newcommand{\\bh}{\\mathbf{h}}\n\\newcommand{\\bi}{\\mathbf{i}}\n\\newcommand{\\bj}{\\mathbf{j}}\n\\newcommand{\\bk}{\\mathbf{k}}\n\\newcommand{\\bl}{\\mathbf{l}}\n\\newcommand{\\bem}{\\mathbf{m}}\n\\newcommand{\\bn}{\\mathbf{n}}\n\\newcommand{\\bo}{\\mathbf{o}}\n\\newcommand{\\bp}{\\mathbf{p}}\n\\newcommand{\\bq}{\\mathbf{q}}\n\\newcommand{\\br}{\\mathbf{r}}\n\\newcommand{\\bs}{\\mathbf{s}}\n\\newcommand{\\bt}{\\mathbf{t}}\n\\newcommand{\\bu}{\\mathbf{u}}\n\\newcommand{\\bv}{\\mathbf{v}}\n\\newcommand{\\bw}{\\mathbf{w}}\n\\newcommand{\\bx}{\\mathbf{x}}\n\\newcommand{\\by}{\\mathbf{y}}\n\\newcommand{\\bz}{\\mathbf{z}}\n\n<!-- \\renewcommand{\\P}{\\mathrm{P}} -->\n\n<!-- $$\n\\DeclarePairedDelimiters{\\set}{\\{}{\\}}\n\\DeclareMathOperator*{\\argmax}{argmax}\n$$\n\n\\definecolor{quarto-callout-note-color}{HTML}{4477AA} -->\n\n:::\n\n\n\nWe begin our exploration of scientific machine learning methods in the fundamental setting of *linear regression problems*. The intended learning outcomes of these notes are that students should be able to:\n\n1. Classify a regression problem as linear or nonlinear\n2. Understand the abstract form of linear least squares problems\n    a. Define the abstract form of linear least squares problems and be able to explain what its key ingredients are\n    b. Translate a description of a model learning problem in words into a specific instance of the abstract form\n    c. Construct examples of linear least squares problems, cast them in the abstract form, and explain their context\n3. Solve linear least-squares problems by deriving and solving the normal equations. \n4. Evaluate linear regression models by computing and interpreting mean error, mean relative error, and $R^2$ values on both training and test data sets.\n\n## Classifying regression problems as linear vs nonlinear\n\nWe have previously introduced regression problems in a general way: recall that the three ingredients of (parametrized) regression problems are (1) paired input and output data, (2) the choice of a parametrized model class, and (3) a method for choosing a model from within that class. The classification of a regression problem as *linear* or *nonlinear* depends solely on ingredient (2), the parametrized model class: if the models in that class depend linearly on the model parameters, the regression problem is a linear regression problem.\n\n::: {.callout-caution collapse=\"true\"}\n## Check your knowledge: Do you remember what it means for a function to depend linearly on a variable?\n\nThe function $f(z;\\theta): \\R^d\\times\\Theta\\to\\R$ is said to be *linear* in the parameters $\\theta$ if, for all $a,b\\in\\R$ and all $\\theta_1,\\theta_2\\in\\Theta$, the following holds:  $f(z; a\\theta_1 + b\\theta_2) = af(z;\\theta_1) + bf(z;\\theta_2)$. \n\nNote that when we say a function is \"linear\", we have to specify in *what*. That is, we can also say $f(z;\\theta)$ is linear in the *inputs* if, for all $a,b\\in\\R$ and all $z_1,z_2\\in\\R^d$, the following holds: $f(az_1 + bz_2;\\theta) = af(z_1;\\theta)+bf(z_2;\\theta)$.\n:::\n\nThe classification of regression problems as linear or nonlinear depends **solely** on the dependence of the functions in the parametrized model class on the **parameters**. That is, we can define functions that are *linear* in $\\theta$ while being *nonlinear* in $z$. \n\n::: {.callout-note}\n## Exercise\nConsider the model classes (@eq-quad-models)-(@eq-perceptron) introduced previously. Are these model classes linear or nonlinear in the parameters? In the inputs?\n:::\n\n## Mathematical problem formulation\nWe are now going to introduce an *abstract* mathematical problem formulation that can be used to describe many *specific instances* of linear regression problems. This is a theme of the course and throughout computational mathematics and engineering: abstraction using the language of mathematics lets us isolate the core essence of the problem we're solving and develop powerful algorithms that can solve specific applications of those problems across a wide range of disciplines. I'll introduce the abstract formulation first, and follow it up with some specific examples. \n\nIngredient 1 (the data set): let $\\{(z_i,y_i)\\}_{i=1}^N$ be a given data set of paired inputs $z_i\\in\\R^d$ and outputs $y_i\\in\\R$. \n\nIngredient 2 (the parametrized model class): let $x:\\R^d\\to\\R^n$ be a function that maps the $d$-dimensional input to an $n$-dimensional *feature vector*. For a fixed $x$, we will consider the following parametrized model class:\n\n$$\n\\mathcal{F}_\\beta := \\{ x(z)^\\top \\beta : \\beta\\in\\R^n\\}\n$$ {#eq-linreg-model-class}\n\nRecall that @eq-linreg-model-class is read as \"$\\mathcal{F}_\\beta$ is defined to be the set of all functions $f(z;\\beta) = x(z)^\\top\\beta$ for all $\\beta\\in\\R^n$.\" This is an abstract way to define the model class for *any* linear regression problem, as we will describe in more detail shortly. \n\nIngredient 3 (the method of choosing the parameters): let $\\beta^*$ be given by \n\n$$\n\\begin{aligned}\n\\beta^* &= \\arg\\min_{\\beta\\in\\R^n} \\frac1N \\sum_{i=1}^N (f(z_i;\\beta) - y_i)^2 \\\\\n&= \\arg\\min_{\\beta\\in\\R^N} \\frac1N \\sum_{i=1}^N (x(z_i)^\\top\\beta - y_i)^2.\n\\end{aligned}\n$$ {#eq-linreg-minimization}\nThen, we define the *learned model* to be $f(z;\\beta^*) = x(z)^\\top\\beta^*$. We call $\\beta^*$ defined this way the \"optimal regression parameters\" or just the \"optimal parameters\", because they are the result of solving an optimization problem. Note that the objective of this optimization function is *defined by the data*, and represents the average squared error of the model over the data set. \n\nTaken together, the three ingredients I have defined above define a *linear least squares problem*, which is a subclass of linear regression problems. We'll now give several examples of specific instances of linear least squares problems to illustrate how broadly applicable this abstract framework is.\n\n## Examples \n\n### Example 1: Aerodynamic drag prediction {#airfoil-example}\n\n<!-- ![Image Source: [@erauAirfoil2024]](images/AirfoilDrag.png){fig-align=\"center\" width=80%} -->\n\nAn important task in aerodynamic design is predicting lift and drag forces on a body moving through air. Let's consider a simplified problem where we are given an fixed airfoil design and our goal is to predict the drag force $F_d$ on the airfoil as a function of three parameters which describe its flight conditions:\n\n* The angle of attack $\\alpha$ \n* The density of the fluid $\\rho$\n* The freestream velocity of the air $v$\n\nTo put this problem in our abstract framework, we define $z = (\\alpha,\\rho,v)^\\top$ to be a three-dimensional input, and take the output to be the drag force $y= F_d$. In order to define a regression problem, we require the existence of a data set $\\{(z_i,y_i)\\}_{i=1}^N$. Note that in this case $z_i = (\\alpha_i,\\rho_i,v_i)$. We assume that this data set is given.\n\nIn linear regression problems, defining the model class amounts to choosing a set of regression *features* by defining $x$. A simple choice takes the inputs themselves to be features: $x^{(1)}(z) = z = (\\alpha,\\rho,v)^\\top$. This leads to a class of parametrized models with a three-dimensional unknown parameter vector $\\beta\\in\\R^3$. The models in this class have the following form:\n\n$$\nf^{(1)}(z;\\beta) = x^{(1)}(z)^\\top\\beta = (\\alpha,\\rho,v) \\beta = \\beta_1\\alpha + \\beta_2\\rho + \\beta_3 v.\n$$\n\nThere are many other possible choices. For example, consider $x^{(2)}(z) = (\\alpha,\\rho, v, \\alpha^2, \\rho^2, v^2, \\alpha\\rho, \\alpha v, \\rho v)^\\top$. This leads to a parametrized model class with a *nine*-dimensional unknown parameter vector $\\beta\\in\\R^9$:\n\n$$\n\\begin{aligned}\nf^{(2)}(z;\\beta) &= x^{(2)}(z)^\\top\\beta = (\\alpha,\\rho, v, \\alpha^2, \\rho^2, v^2, \\alpha\\rho, \\alpha v, \\rho v)\\beta \\\\\n&= \\beta_1\\alpha + \\beta_2\\rho + \\beta_3 v + \\beta_4\\alpha^2 + \\beta_5\\rho^2 + \\beta_6 v^2 + \\beta_7\\alpha\\rho + \\beta_8\\alpha v + \\beta_9 \\rho v\n\\end{aligned}\n$$\n\nFor either the above choices of features $x^{(1)}(z)$ or $x^{(2)}(z)$, we could then define and solve the minimization @eq-linreg-minimization to find the optimal regression parameters and define our learned model $f^{(1)}(z;\\beta^*)$ or $f^{(2)}(z;\\beta^*)$. \n\n::: {.callout-note}\n## Understanding notation\nNote that we use $\\beta$ to denote the unknown parameters in both $f^{(1)}$ and $f^{(2)}$ above despite $\\beta$ referring to different quantities in the definition of the different functions. This is a common notational shortcut --- while we could use the notation $\\beta^{(1)}\\in\\R^3$ and $\\beta^{(2)}\\in\\R^9$ to specify the different $\\beta$ for the different functions, this can be cumbersome if we are considering many different options for the choice of features $x(z)$, and it's standard to just use $\\beta$, where the definition of $\\beta$ is implied by the context. One of the challenges in learning about machine learning and computational mathematics more generally is getting used to similar notation meaning different things in different contexts. That's one of the things that we'll practice in this course.\n:::\n\n\n### Example 2: Monitoring the Maximum Displacement of a Bridge\n\nLeast-squares regression is a powerful tool for estimating unknown quantities in many scientific and engineering disciplines beyond Aerospace. Let's instead say we are interested in accurately estimating the maximum displacement at the midpoint of a bridge under various input-conditions measured by sensors along the bridge. Suppose we can accurately gather the following inputs: \n\n* Load applied to the bridge, $L$ \n* Temperature at the midpoint of the bridge, $T$ \n* Dominant frequency in the bridge, $f$ \n\nWe are interested in quickly estimating the Maximum Displacement (mm), $D$, from these measurements. As we can see, the context of our problem has changed entirely, but we can still fit it into our existing framework by defining the input vector $z=(L, T, f)^\\top$ and output $y=D$. If we take $N$ measurements throughout the year under various environmental conditions, we can again form some training dataset $\\{(z_i, y_i)\\}_{i=1}^N$ which we can use to define some feature-set $x(z)$ and then solve for the optimal weights that map $x(z)$ to $y$ identically to how we did in [Example 1](#airfoil-example).  \n\n### Example 3: Detecting Cardiac Arrhythmia using Health-Monitoring Devices \n\nMany health issues are often difficult to detect without extensive testing. However, with the increase in biometric data available from devices such as smartphones and smart-watches, it has become increasingly feasible to predict health conditions by leveraging this information. $V O_2$ max is a measure of the maximum rate at which a person can use oxygen during exercising and is considered a standard measure of cardiovascular fitness. However, to measure this experimentally requires an extensive laboratory test that measures the volume of oxygen a patient breathes during exercising. Let's now suppose we have developed a smart-watch that gathers the following health-data from its user: \n\n* Median daily Step-Count $s$ \n* Resting Heart Rate $r$ \n* Respiratory Rate $b$\n\nFrom these measurements, we are interested in accurately estimating the $VO_2$ max of a patient. Let's say we have a large sample of many patients of various ages and demographics who have worn our smart-watch for a long period of time. For the $i$ th patient, suppose we have $s_i$, $r_i$ and $b_i$ collected from the device and we have measured each patient's actual $VO_2$ max in a laboratory setting, which we denote $y_i$. We then form a training dataset, $\\{(z_i, y_i)\\}_{i=1}^N$ and solve the least-squares regression problem using the discrete values for $y$ exactly how we did in [Example 1](#airfoil-example). \n\n\n## Solving linear least squares problems\n\nLinear least squares problems are special because they have closed form solutions: that is, we can write an analytical expression for the optimum parameters $\\beta^*$ in terms of the data. To do so, we are going to define a feature data matrix $X\\in\\R^{N\\times n}$ and an output data vector $Y\\in\\R^N$ as follows:\n\n$$\nX = \\begin{pmatrix}\n- &x^\\top(z_1) & - \\\\\n & \\vdots & \\\\\n- & x^\\top(z_N) & -\n\\end{pmatrix}, \n\\qquad \nY = \\begin{pmatrix}\ny_1 \\\\ \\vdots \\\\ y_N\n\\end{pmatrix},\n$$\nwhere the *rows* of $X$ and the *elements* of $Y$ correspond to input-output pairs in the data set. Note that each *column* of $X$ corresponds to a different *feature* defined by an element of the vector-valued function \n$x$.\n\nUsing this notation, @eq-linreg-minimization can be rewritten as\n\n$$\n\\beta^* = \\arg\\min_{\\beta\\in\\R^n} \\frac1N\\|X \\beta - Y\\|^2 \n$$ {#eq-linreg-matrix-min}\n\nThis is the minimization of a multivariate function (because $\\beta$ is a vector). Recall from calculus that to find minimizers of multivariate functions we first seek *critical points* that satisfy the *first-order necessary conditions* for optimality: that is, we look for points where the derivative of the objective function is 0. Let $\\mathcal{L}(\\beta) = \\frac1N\\|X\\beta-Y\\|^2 = \\frac1N(X\\beta - Y)^\\top (X\\beta-Y)$. Then,\n\n$$\n\\frac{\\partial\\mathcal{L}}{\\partial \\beta} = \\frac2N(X^\\top X\\beta - X^\\top Y)\n$$\n\nSetting the derivative equal to 0 yields the standard *normal equations*[^1]:\n\n[^1]: note that the constant factor $\\frac2N$ drops out. It's common to play fast and loose with multiplicative constants in minimizations -- other sources define the minimization objective with a $\\frac12$ multiplier, which leads to the derivative not having the factor of 2 in front and leads to the same critical point. Or you may see the objective function defined without the $1/N$ in front, which still leads to the same critical point.\n\n$$\nX^\\top X\\beta^* = X^\\top Y\n$$\n\nIf $(X^\\top X)$ is invertible, then the unique solution to the normal equations is given by\n\n$$ \n\\beta^* = (X^\\top X)^{-1} X^\\top Y\n$$\n\nand this choice of $\\beta$ defines our final learned model: $f(z;\\beta^*) = x(z)^\\top\\beta^*$.\n\n### Using Python for Least-Squares Regression\n\nNow let's explore how we can actually solve for our optimal weights, $\\beta^*$, given some training data with code. First, we need to import the libraries we need to work with matrices/vectors (`numpy`), plot results (`matplotlib`), work with dataframes (`pandas`), and easily perform more math than base python allows like $\\pi$, sines, cosines, and square-roots (`math`). \n\n::: {#4a186367 .cell execution_count=1}\n``` {.python .cell-code}\nimport numpy as np \nimport matplotlib.pyplot as plt \nimport pandas as pd\nimport math\n```\n:::\n\n\nNow let's say we've imported some pandas dataframe called `df` that contains a set of empirical data from [Example 1](#airfoil-example) (Assume it comes from experimental trials or simulations). We can print the first few rows of the dataset using the `df.head()` method: \n\n\n\n::: {#fee6718d .cell execution_count=3}\n``` {.python .cell-code}\ndf.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>alpha</th>\n      <th>rho</th>\n      <th>velocity</th>\n      <th>f_drag</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>16.854305</td>\n      <td>1.319114</td>\n      <td>79.481130</td>\n      <td>9425.204935</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>42.782144</td>\n      <td>1.203298</td>\n      <td>50.263709</td>\n      <td>13722.379248</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>32.939727</td>\n      <td>1.320528</td>\n      <td>57.690388</td>\n      <td>12863.441979</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>26.939632</td>\n      <td>0.696729</td>\n      <td>49.251769</td>\n      <td>3644.076532</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>7.020839</td>\n      <td>1.227098</td>\n      <td>19.524299</td>\n      <td>186.612122</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nLet's define our input features as $x(z) = (\\alpha, \\rho, v)^\\top$. We can now form $X$ (our training inputs) and $Y$ (our training outputs) matrices by extracting the input features and outputs from the dataframe: \n\n::: {#a4ce253e .cell execution_count=4}\n``` {.python .cell-code}\n# The hstack method concatenates column vectors into \n# an N x d matrix like [1 alpha rho velocity]\nX = np.hstack((np.ones((N, 1)), df[['alpha', 'rho', 'velocity']].values))\nY = df['f_drag'].values\n```\n:::\n\n\nWe can solve for $\\beta^*$ using the `np.linalg.lstsq()` function which efficiently solves the least-squares equation $X \\beta = Y$. The `rcond` keyword argument specifies how \"well-conditioned\" we want our result to be, achieved by cutting off the smallest singular values of $X$ (don't worry too much about this for now). Setting it to `None` assumes $X$ is well-conditioned i.e. far from being rank-deficient. By default, the `lstsq()` function returns a list of the optimal weights, $\\beta^*$, the residuals of the training data ($X \\beta - Y$), the rank of $X$, and the singular values of $X$. For now, we're only interested in $\\beta^*$, so we use `[0]` to select this value.  \n\n::: {#fc1ea496 .cell execution_count=5}\n``` {.python .cell-code}\nbeta_star = np.linalg.lstsq(X, Y, rcond=None)[0]\n```\n:::\n\n\nWe are now able to compute the model's predictions at the training inputs: \n\n::: {#74d595d3 .cell execution_count=6}\n``` {.python .cell-code}\nY_hat = X @ beta_star\n```\n:::\n\n\nLet's now plot $\\hat{{Y}}$ and ${Y}$ to examine how closely correlated the two are. A straight line with slope 1 would mean the linear regression model exactly matched all of the training outputs: \n\n::: {#9e925567 .cell execution_count=7}\n``` {.python .cell-code}\nplt.figure(figsize=(8,4))\nplt.scatter(Y, Y_hat)\nplt.grid()\nplt.xlabel(\"True Drag Force\")\nplt.ylabel(\"Model Predicted Drag Force\")\n```\n\n::: {.cell-output .cell-output-display execution_count=7}\n```\nText(0, 0.5, 'Model Predicted Drag Force')\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](11_ls_files/figure-html/cell-8-output-2.png){width=697 height=356}\n:::\n:::\n\n\nThis plot shows that there is clearly a strong, but nonlinear relationship between the true and model-predicted drag-force. We observe that the linear regression model under-predicts the drag-force when the true force is very low or very high and the model over-predicts the drag-force when the true force is around 5000N. This shows that when the relationship between the input features and the output is nonlinear, linear regression may provide good estimates on average, but choosing features to better capture this nonlinearity may provide much more accurate outputs over the entire input domain. \n\n\n## Assessing the learned models \n\n### Common Performance Metrics\n\nOnce we have trained a model (in the linear regression case, we have computed the optimal $\\beta$ that maps our training inputs to our training outputs), it's important to have some quantitative way to measure how \"well\" our model is able to do this. There are many, many ways to measure model performance. For regression problems, the popular `sklearn` python package for machine learning has thirteen different metrics to assess model performance. We will outline some of the most prominent metrics in this section.\n\nA natural way to assess model performance is to measure the error between the model's predictions and actual outputs. One common way to do this is computed is with *mean squared error*: \n\n$$ \n\\text{MSE} = \\frac{1}{N} \\sum_{i=1}^N (\\hat{y}_i - y_i)^2 \n$$\n\nwhere $\\hat{y}_i$ is the model's best approximation of $y_i$, using inputs $x_i$. Because of how linear regression is formulated, the estimator $\\beta^*$ will be the set of weights that minimize the MSE of the training data. If $X$ is full-rank, $\\beta^*$ will be unique. However, many data-scientists dislike the MSE because it penalizes higher errors more than lower errors and in the context of physical experiments the squared error doesn't have easily interpretable units. For instance, in [Example 1](#airfoil-example) we sought to predict drag-force in Newtons. Using the MSE would produce an error with units of (Newtons)$^2$ which doesn't have an intuitive physical interpretation. For this reason, many scientists use the *mean absolute error*: \n\n$$ \n\\text{MAE} = \\frac{1}{N} \\sum_{i=1}^N |\\hat{y}_i - y_i| \n$$\n\nIn [Example 1](#airfoil-example), this would give us an error with units of Newtons that we can interpret as \"the linear regression model deviates from the true outputs by ___ Newtons on average\". If the output data significantly varies in magnitude over the domain of the input, then we may expect MSE and MAE to dominate in places where the magnitude of $y$ is large. To combat this problem, we might choose to use *mean relative error* to assess the performance of our model. This scales the error at each input/output pair according to how large the output is: \n\n$$ \n\\text{MSE} = \\frac{1}{N} \\sum_{i=1}^N \\frac{|\\hat{y}_i - y_i|}{|y_i|}\n$$\n\nAt the end of **2.4**, we plotted each training output, $y_i$, on the x-axis of a plot and the model's best guess ($\\hat{y}_i$) on the y-axis. If the model was able to perfectly match each $y_i$, then we should expect a perfect line with a slope of 1 ($\\hat{y}=y$). Using the *pearson correlation coefficient*, often denoted $R$ or the *coefficient of determination*, $R^2$, we can assess how accurately the model is able to match a given set of outputs. We can compute this as: \n\n$$ \nR = \\frac{\\sum (\\hat{y}_i -\\bar{\\hat{y}})(y_i - \\bar{y})}{\\sqrt{\\sum (\\hat{y}_i -\\bar{\\hat{y}})^2 \\sum (y_i - \\bar{y})^2}}\n$$ \n\nWhen $\\hat{y}$ perfectly matches the true outputs, $y$, we get a pearson correlation coefficient of $R=R^2=1.0$. Anything lower indicates an imperfect match between the model's predictions and the true outputs.\n\n### Cross-Validation \n\nUp to now, we have only discussed model performance as it relates to the data used to train the model. However, the entire reason we go to the trouble of training machine learning models is so they can be used to make accurate predictions on unseen data. Famous LLMs like ChatGPT are so valuable because we can ask them questions they have never seen before and they can still provide coherent, useful answers. \n\nOftentimes, when machine learning models are highly expressive, (i.e. can model complex functional relationships) they tend to *overfit* to their training data. This happens when the model is so good at matching its training data, it does not generalize well to data it hasn't seen before. This can be especially problematic when our training data contains some sort of noise or uncertainty and our trained model begins to conform to the noise present in the training data. \n\nA straightforward method to assess how much a model is overfitting its training data is to form a `train` and `test` set. Usually around 80% of the training data is used to train the model and about 20% is kept out of the training process and used to evaluate the model's ability to generalize to data it hasn't seen before. A model that generalizes well should exhibit approximately the same performance on its testing data as its training data. When a model shows significantly worse performance on its `test` dataset, this indicates that the model might be overfitting its training data. \n\nLet's refer back to [Example 1](#airfoil-example), when we were trying to accurately predict the force of drag on an airfoil. Say we break up the training data (`X` and `Y`) into (`Xtrain`, `Ytrain`) and (`Xtest`, `Ytest`); one dataset to train the model and one to evaluate it. Suppose we receive the following values for Mean Absolute Error on the training and test predictions: \n\n* ``Training MAE: 61.456 N``\n* ``Testing  MAE: 595.328 N`` \n\nThis shows that the model exhibits significantly lower error on its training data, and much higher on data it hasn't seen before. This is typically a dead giveaway of overfitting. \n\n## Exercises\n\n1. Recall that the loss-function for least-squares regression is given by $\\mathcal{L}(\\beta) = \\frac 1N|| X \\beta - Y||_2^2$. Show that the gradient of $\\mathcal{L}$ with respect to $\\beta$ is given by $\\nabla_\\beta \\mathcal{L} = \\frac2N \\left( X^\\top X \\beta - X^\\top Y\\right)$ \n\n    *Hint:* you may find the following identities from the Matrix Cookbook [@petersen2012matrix] useful. For $v,u\\in\\R^n$ and $A\\in\\R^{n\\times n}$, the following hold:\n\n    i. $\\nabla_v (v^\\top A v) = 2Av$\n    ii. $\\nabla_v (v^\\top u) = \\nabla_v(u^\\top v) = u$\n\n    For an extra-thorough learning experience, try deriving the above identities from the definitions of matrix-vector and dot products.\n\n    <!-- ::: {.callout-note collapse=\"true\"}\n    ## Solution \n\n    $$ \\mathcal{L}(\\beta) = ||X \\beta - Y||_2^2 $$ \n\n    $$ \\mathcal{L}(\\beta) = (X \\beta - Y)^\\top (X \\beta - Y) $$\n\n    $$ \\mathcal{L}(\\beta) = (\\beta^\\top X^\\top - Y^\\top) (X \\beta - Y) $$\n\n    $$ \\mathcal{L}(\\beta) = \\beta^\\top X^\\top X \\beta - \\beta^\\top X^\\top Y - Y^\\top X \\beta - Y^\\top Y  $$\n\n    $$ \\mathcal{L}(\\beta) = \\beta^\\top X^\\top X \\beta - 2 \\beta^\\top X^\\top Y  - Y^\\top Y  $$\n\n    $$ \\nabla (\\beta^\\top X^\\top X \\beta) = 2 X^\\top X \\beta $$ \n\n    $$ \\nabla (2 \\beta^\\top X^\\top Y) = 2 X^\\top Y $$ \n\n    $$ \\nabla (Y^\\top Y) = 0 $$ \n\n    $$ \\nabla \\mathcal{L}_{\\beta} = 2 X^\\top X \\beta - 2 X^\\top Y + 0 = 2 \\left( X^\\top X \\beta - X^\\top Y  \\right) $$ \n\n\n    :::  -->\n\n2. Consider a matrix $A \\in \\R^{n \\times m}$. Which of the following are necessary conditions for $A$ to be invertible? Which are sufficient? \n\n    a. $A$ is a square matrix, i.e. $n = m$  \n    b. The columns of $A$ span $\\R^{n}$ \n    c. The columns of $A$ are linearly independent \n    d. $A$ has no linearly dependent columns \n    e. The null-space of $A$ is empty \n    f. The only solution of $A X = 0$ is $X = 0$. \n<!-- What properties does $A$ need to satisfy in order for $A$ to be invertible? *Hint: there are many properties of a matrix that show it is uniquely invertible. Think dimensions, fundamental spaces, $A^{-1} A = ?$, etc.*  -->\n\n<!-- :::{.callout-note collapse=\"true\"}\n## Solution \nThe matrix $A$ must satisfy the following properties (many of these are different ways of saying the same thing): \n\n* $A$ is a square matrix, i.e. $n = m$ \n* A matrix $\\bB$ exists such that $\\bB A = A \\bB = \\bI$ where $\\bI$ is an $n \\times n$ identity matrix \n- The columns of $A$ span $\\R^{n}$ \n- The columns of $A$ are linearly independent \n- $A$ has no linearly dependent columns \n- $A$ has no singular values equal to zero\n- The null-space of $A$ is empty \n- The only solution of $A X = 0$ is $X = 0$. \n::: -->\n\n3. Show that $X^\\top X$ is invertible if and only if $X$ has full column-rank.\n <!-- *Hint: a symmetric positive definite matrix is always invertible.* -->\n\n<!-- ::: {.callout-note collapse=\"true\"}\n## Solution \n\nRecall that a symmetric positive definite (SPD) matrix satisfies the following for all $\\bv \\neq 0$: \n\n$$ \\bv^\\top A \\bv > 0 $$\n\nIf $X^\\top X$ is SPD, then $X^\\top X$ must be invertible. Hence, the following must hold for all $\\bv \\neq 0$: \n\n$$ \\bv^\\top X^\\top X \\bv > 0 $$ \n\nWe can write this as the squared 2-norm of $X \\bv$: \n\n$$ \\bv^\\top X^\\top X \\bv = || X \\bv||_2^2 > 0$$ \n\nThis is saying that any nonzero $\\bv$ multiplied by $X$ must produce a vector with a norm greater than zero. In other words, $X \\bv$ cannot produce the zero-vector when $\\bv \\neq 0$. This means that $X$ must have an empty null-space, which means that $X$ must have linearly independent columns which is another way of saying it has full column rank.\n::: -->\n\n4. Explain why $\\beta^*$ is the unique solution to the normal equations if $(X^\\top X)$ is invertible. If $(X^\\top X)$ is not invertible, describe all solutions to the normal equations. \n\n<!-- $$ X^\\top X \\beta = X^\\top Y $$\n\nIf $X^\\top X$ is invertible (its columns are linearly independent, its null-space is empty, etc.), is it possible for more than one $\\beta$ to satisfy this equation? Why? \n\nIf $X^\\top X$ is **not** invertible, how many values of $\\beta$ satisfy this equation? Why? \n\n::: {.callout-note collapse=\"true\"}\n## Solution \n\nSolving $X^\\top X \\beta = X^\\top Y$ can be simplified to solving the general equation: \n\n$$ A \\beta = \\bb$$ \n\nIf $A$ is invertible (meaning it has full column-rank, its columns are linearly independent, it has an empty nullspace, etc.), then there exists no nonzero $\\beta$ such that: \n\n$$ A \\beta = 0 $$ \n\nHowever, if $A$ is not invertible, it has a non-empty null-space, which means there exist nonzero $\\beta$ that **does** satisfy $A \\beta = 0$. Let us refer to a $\\beta$ in the null-space of $A$ as $\\beta_0$. Because a null-space is defined by the linear combination of one or more vectors, there are infinitely many combinations of vectors in the null-space that can produce a $\\beta_0$ such that $A \\beta_0 = 0$. Let's say we find a $\\beta$ in the column-space of $A$ that solves the least-squares equation: \n\n$$ A \\beta = \\bb $$ \n\nIf $A$ has a non-empty null space, then we can take a $\\beta_0$ in the null-space of $A$ and make the following substitution: \n\n$$ A (\\beta + \\beta_0) = A \\beta + A \\beta_0 = A \\beta + 0 = A \\beta $$ \n\nThis means we can add in *any* $\\beta_0$ from the null-space and still end up with a nonzero $\\beta$ that minimizes the least squares equation. Because we can form infinitely many vectors from the null-space, this means there are infinitely many solutions to the least-squares equation when $A$ is not invertible. \n -->\n\n\n\n<!-- :::  -->\n\n## Further reading\n\n*Linear Algebra Crash Course (@sec-linalg)*\n\n*The Matrix Cookbook (@petersen2012matrix)*\n\n\n\n\n\n\n\n\n---\n\n",
    "supporting": [
      "11_ls_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}