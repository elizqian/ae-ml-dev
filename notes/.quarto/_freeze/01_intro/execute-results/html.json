{
  "hash": "dbdaa0d911f14a3f22a44f884ebc051c",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Introduction\"\nhtml-math-method:\n  method: mathjax\n  url: \"https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js\"\nnumber-sections: true\nexecute:\n    freeze: true\n---\n\n::: {.hidden}\n\n\\newcommand*{\\R}{\\mathbb{R}}\n<!-- \\renewcommand{\\P}{\\mathrm{P}} -->\n\n<!-- $$\n\\DeclarePairedDelimiters{\\set}{\\{}{\\}}\n\\DeclareMathOperator*{\\argmax}{argmax}\n$$\n\n\\definecolor{quarto-callout-note-color}{HTML}{4477AA} -->\n\n:::\n\n\n\nWelcome to AE 4803 AIM: Foundations of Scientific Machine Learning. This is a new course offered in the Spring 2025 term at Georgia Tech and is intended to be a \"foundations\" level course in the new College of Engineering AI for Engineering minor. \n\n## What's in a name? Artificial intelligence, machine learning, data science, and the scope of this course.\n\nI googled \"artificial intelligence\" (often abbreviated AI) and the first result comes from Google's new \"AI overview\" feature[^1]:\n![Image Source: Google.com](images/01_intro_AIgoogle.png){fig-align=\"center\" width=100% fig-alt=\"Artificial intelligence (AI) is a field of study that focuses on developing machines that can learn, reason, and act in ways that are usually associated with human intelligence.\"}\n\n[^1]: It seems apt to use AI to define AI, and I'm quoting it for illustrative purposes here, but I do want to point out that Google's AI Overview is not at all transparent about how these responses are generated and thus does not meet the standards for being cited as a source in most publishing venues. \n\nBecause I closed the tab with my first search and wanted to go back to the webpage to copy the text for the image alt-text above, I repeated my search, and got a somewhat different answer: \n![Image Source: Google.com](images/01_intro_AIgoogle2.png){fig-align=\"center\" width=100% fig-alt=\"Artificial intelligence (AI) is the ability of a machine to perform tasks that are usually associated with human intelligence.\"}\n\nThese are probably both reasonable definitions for casual conversation, but that's not what we're here for. Instead, we're here to really learn deeply about what AI is, and for that we're going to need **precision** -- that is, of our definitions. \n\n::: {.callout-note}\n## Exercise\nConsider the two different definitions of \"AI\" above carefully. In what (if any) senses are they (a) exactly the same, (b) similar, (c) somewhat different, (d) very different? What consequences might these differences have (a) developing AI algorithms, (b) evaluating AI impacts, (c) creating AI policies?\n:::\n\nI'm not going to provide a definition of AI for now and instead I'm going to throw two more terms into the mix that you may have heard. The first is \"machine learning\" (often abbreviated ML). Rather than get an AI definition for this too, I decided to go to the dictionary Merriam-Webster, which provides the following primary definition [@merriamML2024]: \n\n> a computational method that is a subfield of artificial intelligence and that enables a computer to learn to perform tasks by analyzing a large dataset without being explicitly programmed\n\nAnd finally I'll add the term \"data science\" (curiously, rarely abbreviated DS). I wanted to give you a Merriam-Webster definition here, but the term isn't in their dictionary as of writing this on October 28, 2024. So instead I'm going to use Cambridge Dictionary's definition [@cambridgeDS2024]:\n\n> the use of scientific methods to obtain useful information from computer data, especially large amounts of data\n\n::: {.callout-note}\n## Exercise\nFor both the terms \"machine learning\" and \"data science\", find an alternative definition from a source that is not a generative AI. What differences exist between the new definitions you've found and the ones I've cited above? \n:::\n\nClearly, different people/entities may have different ideas of what AI, ML, and data science may mean. Some people may use these terms  to describe generative tools like ChatGPT, GitHub copilot, and Dall-E (or similar products developed by other entities). Others use these terms to refer to more purpose-built algorithms like AlphaGo (for playing Go) or GraphCast (for weather prediction).[^2] Many academics use these terms to describe the study of the underlying mathematical and programming ideas on which such products are built.\n\n[^2]: this paragraph lists examples that came to me most quickly and thus reflects to some extent my own cognitive biases based on the media I've consumed. I welcome suggestions of other examples of AI/ML/data science to include that are less well-known -- Email me!\n\nMy goal is not to give you a single definition of any of these terms and then to argue that my definition is more correct than any other definition. The point I want to make is that it's worth being clear about how we define these terms in any given context, whether it be in a textbook, a news article, or perhaps a spirited discussion between friends. To that end, I now want to make clear what it is that we will and will not cover in this class, which is a \"foundations\"-level course in the College of Engineering's AI minor. \n\nThe focus of this class will be the mathematical and programming foundations of *scientific machine learning*, which I define as *the study of algorithms which use scientific data to define computational tools that perform useful scientific tasks*. The main scientific task that we will focus on in this course is the task of *predictive simulation*, which seeks to predict the behavior or outcomes of scientific or engineering systems. Predictive simulation is a key task in engineering disciplines like design and control, where we seek to predict design outcomes and control responses in order to make decisions about design parameters and control inputs. The class of machine learning methods that we will focus on in this class will therefore be *regression* methods, which use data to define relationships between inputs and outputs that allow us to take a specified input and issue a prediction for the output. \n\n## Regression methods: an overview\n\n### Motivation and problem description\nWe use the notation $z\\in \\R^d$ to denote a real-valued vector of $d$ input variables, and the notation $y \\in\\R$ to denote a real-valued scalar output variable. Our goal is to be able to predict the value of $y$ if we know the value(s) of the input variable $z$. Some examples:\n\n* in aerodynamic modeling, $z$ could contain airfoil geometry parameters like camber and thickness, and $y$ could represent the lift coefficient. Being able to predict $y$ from $z$ enables engineers to choose more aerodynamically efficient designs. \n* in orbital dynamics, $z$ could represent orbital parameters like altitude and inclination, and $y$ could represent the total time a satellite spends outside the sun's shadow in a given time period. Being able to predict $y$ from $z$ enables engineers to determine if a satellite's solar panels will generate enough power to support the satellite's mission. \n* in chemical process engineering, $z$ could represent conditions within a reactor like temperature and chemical mixture properties and $y$ could represent the reaction rate. Being able to predict $y$ from $z$ enables engineers to design more efficient reactors. \n\n\n::: {.callout-note}\n## Exercise\nPropose your own example scenario where it would be useful to predict real-valued outputs from inputs, drawing on your own experience, e.g. in personal projects, previous coursework, work/internship/co-op experiences, or extracurriculars. What would $z$ and $y$ represent? What does predicting $y$ from $z$ enable in your scenario?\n:::\n\nMathematically, predicting $y$ from $z$ amounts to defining a *function* $f$ that takes in a $d$-dimensional input and outputs a scalar. Mathematical notational shorthand for this is $f:\\R^d\\to\\R$. The question at hand is: how do we choose $f$? There are many ways to do so:\n\n1. At a baseline, you could just make up a model: let's just say $y = f(z) = \\|z\\|^2$. This is mathematically valid, but it's probably a bad model for the three example scenarios above, because this model probably issues predictions that are very different from the true outputs. \n\n2. Alternatively, you could develop a model based on physical principles (a \"physics-based\" model) -- if you have taken classes in (aero/thermo)dynamics, then you would have learned some ways to calculate $y$ from $z$ in the above examples, e.g. based on potential flow theory, rigid body dynamics, or the Arrhenius equation. These models are likely to be more accurate than our made-up model above, although they are often imperfectly accurate because they make simplifying assumptions. One drawback of physics-based models is that they may be computationally expensive (some computational fluid dynamics simulations require many thousands of hours of supercomputing time). Additionally, fully physics-based models may not even exist in some applications (e.g., there are many aspects of plasma physics for which we currently lack a complete theoretical understanding).\n\n3. Finally, our focus will be on using *data* to define a model (a \"data-driven\" model or a \"learned\" model). We assume that we have a data set consisting of $N$ pairs of input and output data, $(z_i,y_i)$ for $i = 1,\\ldots,N$. To define our model, we want to choose an $f$ so that the predicted output $f(z_i)$ is close to the output data $y_i$ for all the data in our data set. This is sometimes called \"fitting\" the model to data. The advantages of data-driven models are that they may be significantly cheaper than physics-based models, and they can be fit to experimental data even when we lack scientific theory for developing physics-based models. The disadvantages are that data-driven models require data -- and the amount of data that would be \"enough\" to ensure that the learned model is accurate or useful is highly dependent on the application. \n\nLearning how to fit models to data and assess their accuracy and usefulness is the focus of this course. \n\n### Mathematical setting and problem formulation\n\nHot take: Machine learning methods, at their core, are simply very complicated calculators. \n\nOur goal is to understand the calculations that these methods are carrying out, which is going to enable us to understand and assess both the successes and failures of the methods. This means isolating the mathematical problem that is being solved in each of the methods.\n\n\nformulation as selection from within a parametrized model class \n\nchoosing parameters via optimization \n\nsome implication of the breadth of methods\n\n### Things that are not regression\n\nI want to emphasize that this class is not and indeed cannot (realistically) be an exhaustive introduction to machine learning, artificial intelligence, or data science. Even the community of professionals who describe themselves as working in \"scientific machine learning\" is quite broad in scope and would include folks working on topics that I do not intend to cover in this class. There are many topics within AI/ML/data science we will not cover (beyond perhaps at most a very surface level), including generative modeling, decision trees, unsupervised learning methods like clustering, and many more. \n\nGive one example, list other examples, I cannot possibly hope to cover all these things in this course, so another goal of the course is to teach the language of ML so you are prepared to learn other things in future courses and on your own. \n\n## The three pillars of AI: mathematics, computation, and human intelligence \n\nmathematics is the language that describes what we want to do\n\ncomputation/programming is the execution (translation)\n\nhuman intelligence is woven throughout, specifies problem, evaluates results, re-specifies problem. \n\n### Course structure and intended learning outcomes\nfill in nearer to term\n\n<!-- ## A Motivating Example -->\n\n<!-- ![Image Source: Embry-Riddle Aeronautical University](images/AirfoilDrag.png){fig-align=\"center\" width=80%} -->\n<!-- \nSuppose we wish to efficiently approximate the force of drag ($F_d$), measured in $N$, on a specific airplane wing if we only have access to the following information about the wing and its operating conditions: \n\n* The angle of attack ($\\alpha$), measured in degrees\n* The density of the fluid ($\\rho$), measured in $kg/m^3$ \n* The velocity of the fluid ($v$), measured in $m/s$  -->\n\n<!-- ## Linear Approximation of an Unknown Function\n\nLet's bundle our inputs into a single vector, defined by: \n\n$$ \\mathbf{x} = \\begin{bmatrix} \\alpha \\\\ \\rho \\\\ v\\end{bmatrix} $$ \n\n\nWe assume there is some unknown function, $f(\\cdot):\\mathbb{R}^3 \\rightarrow \\mathbb{R}$, that gives us an optimal estimate for drag-force based on these \"features\": \n\n$$ F_d = f (\\mathbf{x}) + \\varepsilon $$ \n\nwhere $\\varepsilon$ is some external noise, disturbances or information entirely independent of the input variables.  -->\n\n<!-- Now consider a function $h(\\mathbf{x}; \\beta):\\mathbb{R}^3 \\rightarrow \\mathbb{R}$ which is a simple linear combination of the inputs: \n\n$$ h(\\mathbf{x}; \\beta) = \\begin{bmatrix} 1 & \\mathbf{x}^\\top \\end{bmatrix} \\begin{bmatrix}  \\beta_0 \\\\ \\beta_1 \\\\ \\beta_2 \\\\ \\beta_3  \\end{bmatrix} = \\beta_0 + \\beta_1 \\alpha + \\beta_2 \\rho + \\beta_3 v $$\n\n**The Million Dollar Question:**\n\nGiven we know the structure of $h(\\mathbf{x}; \\beta)$, how can we efficiently optimize the parameters of $h(\\mathbf{x}; \\beta)$ to best approximate $f(\\mathbf{x})$? \n\n## Representing Observed Input-Output Data\n\nSuppose we have taken $N$ real-life samples of the input variables and their corresponding drag-force, $F_d$. Let each sample of the system under various operating conditions form row of a matrix $\\mathbf{X} \\in \\mathbb{R}^{N \\times 4}$ for the inputs and a matrix $\\mathbf{Y} \\in \\mathbb{R}^N$ for their corresponding outputs: \n\n$$ \\mathbf{X} = \\begin{bmatrix} 1 & \\alpha_1 & \\rho_1 & v_1 \\\\ 1 & \\alpha_2 & \\rho_2 & v_2 \\\\ & & \\vdots & \\\\ 1 & \\alpha_N & \\rho_N & v_N \\end{bmatrix} , \\mathbf{Y} = \\begin{bmatrix} F_{d1} \\\\ F_{d2} \\\\ \\vdots \\\\ F_{d3} \\end{bmatrix} $$ \n\n \nWe can efficiently compute the predictions of $h(\\mathbf{X}; \\beta)$ with a simple matrix-vector multiplication: \n\n$$ \\hat{\\mathbf{Y}} = \\mathbf{X} \\beta = \\begin{bmatrix} 1 & \\alpha_1 & \\rho_1 & v_1 \\\\ 1 & \\alpha_2 & \\rho_2 & v_2 \\\\ & & \\vdots & \\\\ 1 & \\alpha_N & \\rho_N & v_N \\end{bmatrix} \\begin{bmatrix} \\beta_0 \\\\ \\beta_1 \\\\ \\beta_2 \\\\ \\beta_3 \\end{bmatrix} = \\begin{bmatrix}  \\beta_0 + \\beta_1 \\alpha_1 + \\beta_2 \\rho_1 + \\beta_3 v_1 \\\\ \\beta_0 + \\beta_1 \\alpha_2 + \\beta_2 \\rho_2 + \\beta_3 v_2  \\\\ \\vdots \\\\ \\beta_0 + \\beta_1 \\alpha_N + \\beta_2 \\rho_N + \\beta_3 v_N \\end{bmatrix}  \\in \\mathbb{R}^N $$ \n\n## The Least-Squares Optimization Problem\n\nOur goal is to adjust the parameters $\\beta$ so that our predictions, $\\hat{\\mathbf{Y}}$, are as close to the true outputs, $\\mathbf{Y}$ as possible. One way to measure prediction error is with Mean Squared Error: \n\n$$ \\text{MSE} = \\frac{1}{N} \\sum_{i=1}^N (\\hat{y}_i - y_i)^2 = \\frac{1}{N} || \\hat{\\mathbf{Y}} - \\mathbf{Y}||_2^2 = \\frac{1}{N} || \\mathbf{X} \\beta - \\mathbf{Y} ||_2^2 $$ \n\nthe $\\frac{1}{N}$ is only a scalar, we wish to choose the value of $\\beta$ that minimizes the following loss-function: \n\n$$ L(\\beta) = ||\\mathbf{X} \\beta - \\mathbf{Y}||_2^2 $$\n\n## Solving the Least-Squares Problem\n\nBecause the squared 2-Norm can be rewritten as an inner product, we can rewrite this loss-function as: \n\n$$ L(\\beta) = ||\\mathbf{X} \\beta - \\mathbf{Y}||_2^2= (\\mathbf{X} \\beta - \\mathbf{Y})^\\top (\\mathbf{X} \\beta - \\mathbf{Y}) $$\n$$ = (\\beta^\\top \\mathbf{X}^\\top - \\mathbf{Y}^\\top) (\\mathbf{X} \\beta - \\mathbf{Y}) $$\n\n$$ = \\beta^\\top \\mathbf{X^\\top X} \\beta - 2 \\beta^\\top \\mathbf{X^\\top \\mathbf{Y}} + \\mathbf{Y^\\top Y}$$\n\nAs we learned in multivariable calculus, to find a the extrema of a continuous function, we need to identify the critical points of the function. This means setting the gradient of the loss-function equal to the zero-vector:\n\n$$ \\nabla L_\\beta = 2 \\mathbf{X^\\top X} \\beta - 2 \\mathbf{X^\\top Y} = \\mathbf{0}$$ \n\nSolving this equation for $\\beta$ yields only one critical point: \n\n$$ \\hat{\\beta} = (\\mathbf{X^\\top X})^{-1} \\mathbf{X^\\top Y} $$ \n\nTo check whether this point is a local minimum, maximum, or neither, we examine the nature of the Hessian: \n\n$$ \\nabla^2 L_\\beta = 2 \\mathbf{X^\\top X} $$ \n\nBecause the Hessian is symmetric positive semidefinite and does not depend on $\\beta$, this means that $L(\\beta)$ is convex everywhere. Hence, $\\hat{\\beta}$ must be a global local minimum. \n\n## Experimental Example\n\nNow suppose we have 100 experimental observations of various angles of attack, air-densities and velocities with the corresponding drag-force in a pandas DataFrame called `df`: \n\n\n\n::: {#f9c39425 .cell execution_count=2}\n``` {.python .cell-code}\ndf.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=38}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>alpha</th>\n      <th>rho</th>\n      <th>velocity</th>\n      <th>f_drag</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>16.854305</td>\n      <td>1.319114</td>\n      <td>79.481130</td>\n      <td>9425.204935</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>42.782144</td>\n      <td>1.203298</td>\n      <td>50.263709</td>\n      <td>13722.379248</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>32.939727</td>\n      <td>1.320528</td>\n      <td>57.690388</td>\n      <td>12863.441979</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>26.939632</td>\n      <td>0.696729</td>\n      <td>49.251769</td>\n      <td>3644.076532</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>7.020839</td>\n      <td>1.227098</td>\n      <td>19.524299</td>\n      <td>186.612122</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nWe can create $\\mathbf{X}$ and $\\mathbf{Y}$ matrices by extracting the input features and outputs from the dataframe: \n\n::: {#24e05a47 .cell execution_count=3}\n``` {.python .cell-code}\nX = np.hstack((np.ones((N, 1)), df[['alpha', 'rho', 'velocity']].values))\nY = df['f_drag'].values\n```\n:::\n\n\nWe can solve for $\\hat{\\beta}$ by computing the normal equations: \n\n::: {#6ba6157e .cell execution_count=4}\n``` {.python .cell-code}\nbeta_hat = np.linalg.inv(X.T @ X) @ (X.T @ Y)\n```\n:::\n\n\nAnd then compute the model's predictions at the training inputs: \n\n::: {#90b644c6 .cell execution_count=5}\n``` {.python .cell-code}\nY_hat = X @ beta_hat\n```\n:::\n\n\nNow let's plot the $\\hat{\\mathbf{Y}}$ and $\\mathbf{Y}$ to examine how closely correlated the two are. A straight line with slope-1 would mean the model exactly fitted all of the outputs: \n\n::: {#d2796855 .cell execution_count=6}\n``` {.python .cell-code}\nplt.figure(figsize=(8,4))\nplt.scatter(Y, Y_hat)\nplt.grid()\nplt.xlabel(\"True Drag Force\")\nplt.ylabel(\"Model Predicted Drag Force\")\n```\n\n::: {.cell-output .cell-output-display execution_count=42}\n```\nText(0, 0.5, 'Model Predicted Drag Force')\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](01_intro_files/figure-html/cell-7-output-2.png){width=697 height=350}\n:::\n:::\n\n\nThere is clearly a strong, but nonlinear correlation between the true and model-predicted drag-force. This indicates that there is a nonlinear relationship between the features and the output values. Let us quantify the MSE: \n\n::: {#d6f50d33 .cell execution_count=7}\n``` {.python .cell-code}\nlinear_mse = np.linalg.norm(Y_hat - Y, 2) / N\nprint(\"Linear Features Mean-Squared Error: %.2f\" % (linear_mse))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nLinear Features Mean-Squared Error: 645.47\n```\n:::\n:::\n\n\n## Using Nonlinear Features to Improve Model Performance\n\nWe know the underlying formula for drag-force is: \n\n$$ F_d = \\frac{1}{2} \\rho v^2 C_d A  $$ \n\nWhile this function doesn't depend on the angle of attack, we do see how the features are polynomially related to one another. Naturally, it is going to be difficult for a linear combination of features to replicate this. However, if we take the log of both sides, something interesting happens: \n\n$$ \\ln(F_d) = \\ln(\\frac{1}{2} \\rho v^2 C_d A) = \\ln(\\frac{1}{2}) + \\ln(\\rho) + 2\\ln(v) + \\ln(C_d) + \\ln(A) $$\n\nWhen our features and outputs are log-scaled, we see a friendly linear-combination of log-scaled versions features emerge! Let's alter our inputs and outputs accordingly, so our problem becomes: \n\n$$ \\mathbf{X} = \\begin{bmatrix} 1 & \\ln \\alpha_1 & \\ln \\rho_1 & \\ln v_1 \\\\ 1 & \\ln \\alpha_2 & \\ln \\rho_2 & \\ln v_2 \\\\ & & \\vdots & \\\\ 1 & \\ln \\alpha_N & \\ln \\rho_N & \\ln v_N \\end{bmatrix} , \\mathbf{Y} = \\begin{bmatrix} \\ln F_{d1} \\\\ \\ln F_{d2} \\\\ \\vdots \\\\ \\ln F_{d3} \\end{bmatrix} $$ \n\nLet's see how this works programmatically: \n\n::: {#2755d3c2 .cell execution_count=8}\n``` {.python .cell-code}\nX_log = np.hstack((np.ones((N, 1)), np.log(df[['alpha', 'rho', 'velocity']].values)))\nY_log = np.log(df['f_drag'].values - df['f_drag'].min() + 1)\n\nbeta_log = np.linalg.inv(X_log.T @ X_log) @ (X_log.T @ Y_log)\n\nY_hat_log = np.exp(X_log @ beta_log)+ df['f_drag'].min() - 1\n\nplt.figure(figsize=(8,4))\nplt.scatter(Y, Y_hat_log)\nplt.grid()\nplt.xlabel(\"True Drag Force\")\nplt.ylabel(\"Model Predicted Drag Force\")\n```\n\n::: {.cell-output .cell-output-display execution_count=44}\n```\nText(0, 0.5, 'Model Predicted Drag Force')\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](01_intro_files/figure-html/cell-9-output-2.png){width=686 height=350}\n:::\n:::\n\n\nNow let's see if our MSE has changed: \n\n::: {#65a06429 .cell execution_count=9}\n``` {.python .cell-code}\nlog_mse = np.linalg.norm(Y_hat_log - Y, 2)/N\nprint(\"Logarithmically Scaled Features Mean-Squared Error: %.2f\" % (log_mse))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nLogarithmically Scaled Features Mean-Squared Error: 144.70\n```\n:::\n:::\n\n\nWe have nearly a 5x reduction in MSE just by log-scaling our features! If we choose the right features, linear regression can be an extremely powerful method for approximating complex functions.  -->\n\n---\n\n",
    "supporting": [
      "01_intro_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}